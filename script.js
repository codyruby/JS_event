/*=======================================================================================
Fonctionnalit√© 1 :
On commence par un petit √©chauffement : lorsque l'utilisateur va cliquer sur le footer 
(portant le tag <footer>), tu vas afficher le mot "clique" en console.

Cette fonctionnalit√© doit √™tre cod√©e avec un addEventListener("click", 
function(){ } car c'est une bonne habitude √† prendre ! üòá
=======================================================================================*/
/*=======================================================================================
Fonctionnalit√© 1-bis :
Maintenant on va upgrader cette premi√®re fonctionnalit√© : lorsque l'utilisateur va cliquer sur le footer, 
tu vas afficher en console "clic num√©ro x" avec x qui commence √† 1 et s'incr√©mente de +1 √† chaque clic.
=======================================================================================*/

function footerClick() {
    console.log(`clique num√©ro : ${footerClickNumber++}`)
}

let footerClickNumber = 1

document.querySelector("footer").addEventListener("click", footerClick)

/*=======================================================================================
Fonctionnalit√© 2 :
On va enfin faire fonctionner ce satan√© "Hamburger Menu" qui s'affiche depuis le d√©but 
mais qui n'actionne rien quand on clique dessus. C'est quoi un "hamburger menu" ? 
C'est √ßa, ce bouton avec trois lignes horizontales en haut √† droite de la navbar.

Tu vas faire que si quelqu'un clique sur ce bouton, 
l'√©l√©ment HTML portant l'Id navbarHeader perde sa classe collapse. Une fois que √ßa, √ßa marche, 
fait que si on clique √† nouveau dessus, la classe collapse soit rajout√©e √† nouveau √† l'√©l√©ment portant 
l'Id navbarHeader
=======================================================================================*/

let hamburgerButton = document.querySelector("button.navbar-toggler");

function toggleCollapse() {
  const navBar = document.getElementById("navbarHeader");
  
  navBar.classList.toggle("collapse")
}

hamburgerButton.addEventListener("click", toggleCollapse)

/*=======================================================================================
Fonctionnalit√© 3 :
√Ä pr√©sent, on va faire cela : si on clique sur le bouton "Edit" de la premi√®re card, 
le texte de la card va se mettre en rouge de fa√ßon irr√©versible (sauf si on recharge la page). 
√Ä toi de jouer !
=======================================================================================*/

let editButton = document.querySelector(".album .container .row div:first-of-type .btn-group button:last-of-type");


function toRed(){
    let text = document.querySelector(".card-text");
  
	text.style.color = 'red';
}

editButton.addEventListener("click", toRed)

/*=======================================================================================
Fonctionnalit√© 4 :
On va faire quelque chose de similaire √† la fonctionnalit√© 3 mais un peu plus complexe : 
si on clique sur le bouton "Edit" de la deuxi√®me card, le texte de la card va se mettre en vert. 
Si on re-clique dessus, il redevient comme avant ! Tu l'as compris, il va falloir que tu cherches 
comment faire un "toggle" sur le style du texte. C'est plus compliqu√© que sur une classe.
=======================================================================================*/

let editGreenButton = document.querySelector(".album .container .row div:nth-of-type(2) .btn-group button:last-of-type");

//fonction qui va changer la couleur du texte, soit en vert si le texte etait noir, soit en noir si le texte etait en vert. 
function toggleGreen(e) {
    let text = e.target.parentNode.parentNode.parentNode.querySelector(".card-text");
  //partie du code qui v√©rifie de quelle couleur √©tait le text pour le changer en vert ou noir. 
  text.style.color =  (text.style.color === "green") ? "rgb(33, 37, 41)" : "green";
}

//appel de la fonction qui change la couleur du texte quand l'user clique sur le bouton "edit" de la deuxi√®me card. 
editGreenButton.addEventListener("click", toggleGreen);

/*=======================================================================================
Fonctionnalit√© 5 :
Pour le fun, on va impl√©menter une fonctionnalit√© √† la sauce ‚ò¢"nucl√©aire"ü§Ø. 
Et comme elle est un peu dangereuse, on va la cacher‚Ä¶ Voici comment elle doit marcher : 
si un utilisateur double clique sur la navbar en haut, tout Bootstrap dispara√Æt 
et la page s'affiche comme si on avait oubli√© de mettre le CDN qui la relie au fichier CSS. 
Si possible, rends cette fonctionnalit√© r√©versible 
(un nouveau double-clic fait tout revenir √† la normale).
=======================================================================================*/

const navbar = document.querySelector("header")

function toggleBootstrap() {
  const boostrapLink = document.head.querySelector("link")

  //Cette fonction marche dans les deux sens,
  boostrapLink.disabled = (boostrapLink.disabled) ? false : true
}

navbar.addEventListener("dblclick", toggleBootstrap)

/*=======================================================================================
Fonctionnalit√© 6 :
T'as d√©j√† impl√©ment√© 5 fonctionnalit√©s d'interaction ! C'est top ! 
On va commencer √† corser les choses.

La fonctionnalit√© sera la suivante : si un utilisateur passe sa souris sur le bouton "View" 
d'une card (n'importe laquelle), celle-ci va se r√©duire. Cela veut dire que le texte dispara√Æt, 
l'image n'appara√Ætra qu'√† 20 % de sa taille d'origine et les boutons "Edit" / "View" restent visibles. 
Cette fonction sera r√©versible : s'il repasse sa souris, la card redevient normale !
=======================================================================================*/

const viewBtns = document.querySelectorAll(".album .container .row div .btn-group button:first-of-type")

//fonction pour r√©duit la carte. 
function reduceCard(elt) {
  elt.querySelector(".card-text").style.display = "none"
  elt.querySelector("img").style.width = "20%"
  elt.classList.add("reduced")
}

//fonction qui permet de remettre les cards √† leur taille originale
function expendCard(elt) {
  elt.querySelector(".card-text").style = ""
  elt.querySelector("img").style = ""
  elt.classList.remove("reduced")
}

//fonction qui permet de determiner la taille des cards afin de d√©terminer si au passage de la souris il faut la r√©duire ou l'agrandir.
function toggleCard(e) {
  const card = e.target.parentNode.parentNode.parentNode.parentNode

  if (card.classList.contains("reduced")) {
    expendCard(card)
  } else {
    reduceCard(card)
  } 
}

viewBtns.forEach(card => card.addEventListener("mouseover", toggleCard))

/*=======================================================================================
Fonctionnalit√© 7 :
Allez on va rajouter un peu de WTF dans la page : si un utilisateur clique sur le bouton gris ==>, 
la derni√®re card (en bas √† droite) va passer en premier (en haut √† gauche). 
On va pouvoir faire tourner les cards !


Petite remarque : tu vas r√©aliser que si tu m√©langes les cards, 
il est fort probable que la fonctionnalit√© 6 va se mettre √† faire n'importe quoi. 
Si tu survoles un bouton "View", c'est une autre card qui va se r√©duire. 
Si tu arrives √† corriger √ßa, c'est cool mais la consigne est d'ignorer ce souci pour le moment.
=======================================================================================*/


/*=======================================================================================
Fonctionnalit√© 8 :
√âvidemment tu t'y attendais : on va faire tourner les card dans l'autre sens aussi. 
Donc si un utilisateur clique sur le bouton bleu <==, la premi√®re card devra passer en dernier. 
√Ä premi√®re vue, tu te dis que si tu as r√©ussi √† faire la fonctionnalit√© pr√©c√©dente, 
celle-ci c'est du gateau... sauf qu'il y a quelques pi√®ges. üòà
=======================================================================================*/


// s√©l√©ction des deux liens <== et ==>
const arrowLeft = document.querySelector("main section.jumbotron a:first-of-type")
const arrowRight = document.querySelector("main section.jumbotron a:last-of-type")


function forwardCard() {
  const Cards = document.querySelector(".album > .container > .row")

  CardToMove = Cards.removeChild(Cards.lastElementChild)
  Cards.prepend(CardToMove)
}

function backwardCard(e) {
  const Cards = document.querySelector(".album > .container > .row")

  e.preventDefault()
  CardToMove = Cards.removeChild(Cards.firstElementChild)
  Cards.appendChild(CardToMove)
}

arrowRight.addEventListener("click", forwardCard)
arrowLeft.addEventListener("click", backwardCard)


/*=======================================================================================
Fonctionnalit√© 9 :
Bon si t'es arriv√© jusque-l√†, c'est que t'as besoin d'un peu de challenge. 
Du coup je t'ai concoct√© une fonctionnalit√© de derri√®re les fagots, sp√©cialement con√ßue pour 
les moussaillons pas piqu√©s des hannetons (this sentence is brought to you by www.vieilles-expressions.fr). 
Voici ce qu'elle va devoir faire :

La fonctionnalit√© se d√©clenchera si le logo de la page (JS & Events) est s√©lectionn√© 
et qu'on appuie sur une touche sp√©cifique du clavier.
Si l'utilisateur presse la touche "a", l'ensemble de la page va √™tre condens√© sur 
4 colonnes Bootstrap √† gauche de l'√©cran.
Si l'utilisateur presse la touche "y", l'ensemble de la page va √™tre condens√© sur 
4 colonnes Bootstrap au milieu de l'√©cran.
Si l'utilisateur presse la touche "p", l'ensemble de la page va √™tre condens√© sur 
4 colonnes Bootstrap √† droite de l'√©cran.
Si l'utilisateur presse la touche "b", tout redevient normal.
=======================================================================================*/